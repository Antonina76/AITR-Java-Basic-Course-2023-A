package complexity;

import java.util.Arrays;

public class Complexity {
    public static void main(String[] args) {
        int[] arr = {2,3,5,7,11,13,17,19};
       //кол-во операций не зависит от длины массива
        double mid = (arr[0] + arr[arr.length-1])/2;//вычисление среднего значения
        //кол-во действий :
        //1. Взять 0-й элемент
        //2. Вычислить arr.length
        //3. Взять посл. элемент
        //4. Сложить элементы
        //5. Разделить на 2
        // это константная сложность О(5)

        // сложение элементов массива
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        //при увеличении кол-во элементов массива кол-во операций растет прямо пропопрционально
        //это линейная сложность О (n)

        //поиск элемента массива с помощью BinarySearch

        int index = Arrays.binarySearch(arr,10);
        //при 8 элементах - 3 операции
        //при 16 элементах - 4 операции
        // при 1024 - 10 операций
        // при 2048 - 11 операций
        // такая сложност называется О(log(n)) - логарифмическая сложность
// TODO: 28.08.23
        //сортировка массива bubbleSort
        for (int i = 0; i < arr.length-1; i++) {
                 for (int j = 0; j < arr.length -1-i; j++) {
                if(arr[j]>arr[j+1]){
                    int t = arr[j];
                    arr[j] = arr[j+1];
                    arr [j+1] = t;
                }
            }
            //такая сложность называется O(n^2)
        }
        Arrays.sort(arr);
        //такая сложность называется полилинейная О (n log n)
    }
}
